const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseAdmin = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY,
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  }
);

async function verifyAuthAccounts() {
  console.log('üîç Auth Í≥ÑÏ†ï ÏÉÅÌÉú ÌôïÏù∏ Ï§ë...\n');

  try {
    // 1. auth.users ÌÖåÏù¥Î∏îÏùò Î™®Îì† ÏÇ¨Ïö©Ïûê Ï°∞Ìöå
    console.log('üìã Auth Users:');
    const { data: authData, error: authError } = await supabaseAdmin.auth.admin.listUsers();
    
    if (authError) {
      console.error('‚ùå Auth users Ï°∞Ìöå Ïã§Ìå®:', authError.message);
      return;
    }

    console.log(`Ï¥ù ${authData.users.length}Î™ÖÏùò auth ÏÇ¨Ïö©Ïûê Î∞úÍ≤¨:`);
    authData.users.forEach((user, index) => {
      console.log(`${index + 1}. ${user.email} (ID: ${user.id})`);
    });

    console.log('\nüìã User Profiles:');
    const { data: profiles, error: profileError } = await supabaseAdmin
      .from('user_profiles')
      .select('user_id, name, email, role');

    if (profileError) {
      console.error('‚ùå User profiles Ï°∞Ìöå Ïã§Ìå®:', profileError.message);
      return;
    }

    console.log(`Ï¥ù ${profiles.length}Î™ÖÏùò ÌîÑÎ°úÌïÑ Î∞úÍ≤¨:`);
    profiles.forEach((profile, index) => {
      const authUser = authData.users.find(u => u.id === profile.user_id);
      console.log(`${index + 1}. ${profile.name} (${profile.email}) - Auth: ${authUser ? '‚úÖ' : '‚ùå'}`);
    });

    console.log('\nüîç Îß§ÌïëÎêòÏßÄ ÏïäÏùÄ ÌîÑÎ°úÌïÑÎì§:');
    const unmappedProfiles = profiles.filter(profile => 
      !authData.users.some(u => u.id === profile.user_id)
    );
    
    if (unmappedProfiles.length === 0) {
      console.log('‚úÖ Î™®Îì† ÌîÑÎ°úÌïÑÏù¥ Auth Í≥ÑÏ†ïÍ≥º Îß§ÌïëÎêòÏñ¥ ÏûàÏäµÎãàÎã§!');
    } else {
      console.log(`‚ùå ${unmappedProfiles.length}Í∞úÏùò ÌîÑÎ°úÌïÑÏù¥ Auth Í≥ÑÏ†ïÍ≥º Îß§ÌïëÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§:`);
      unmappedProfiles.forEach(profile => {
        console.log(`- ${profile.name} (${profile.user_id})`);
      });
    }

  } catch (error) {
    console.error('‚ùå Ïò§Î•ò:', error.message);
  }
}

verifyAuthAccounts().catch(console.error);